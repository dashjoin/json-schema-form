import { HttpHeaders } from '@angular/common/http';
import { forkJoin, of } from 'rxjs';
import { map, publishReplay, refCount, switchMap } from 'rxjs/operators';
import jsonata from 'jsonata';
/**
 * default implementation that handles choices based on schema fields.
 * can be overriden via schema.displayWith
 */
export class DefaultChoiceHandler {
    /**
     * create default choice handler
     *
     * @param http      http connection client
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * load choices
     */
    load(value, schema) {
        if (!this.cache) {
            if (schema.choices) {
                // static choices are given, convert them to Choice and merge the result
                const arr = [];
                for (const s of schema.choices) {
                    arr.push(this.choice(s, schema));
                }
                this.cache = forkJoin(arr);
            }
            else {
                // load choices from URL
                this.cache = this.getChoices(schema.choicesUrl, schema.choicesUrlArgs, schema.choicesVerb).pipe(switchMap(res => {
                    if (schema.jsonata) {
                        res = jsonata(schema.jsonata).evaluate(res);
                        if (!Array.isArray(res)) {
                            res = [res];
                            // introduce jsonName, jsonValue
                        }
                    }
                    const obs = [];
                    for (const r of res) {
                        obs.push(this.choice(r, schema));
                    }
                    return forkJoin(obs);
                }), 
                // setup caching
                publishReplay(1), refCount());
            }
        }
        return this.cache;
    }
    /**
     * filter after keystroke
     */
    filter(value, schema, current, choices) {
        return choices.pipe(map(arr => {
            if (!current) {
                return arr;
            }
            const res = arr.filter(i => this.include(i, current));
            return res;
        }));
    }
    /**
     * called from filter, intended to allow subclasses to easily change filter algorithm
     */
    include(i, current) {
        var _a;
        return (_a = i.name) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes(current.toLowerCase());
    }
    /**
     * default choice implementation: just reuse value as name
     * check for localName
     */
    choice(value, schema) {
        if (schema.displayWith === 'localName') {
            for (const delimiter of ['/', '#', ':', '.']) {
                const parts = value.split(delimiter);
                if (parts.length > 1) {
                    return of({ value, name: parts[parts.length - 1] });
                }
            }
            return of({ value, name: value });
        }
        if (schema.jsonata) {
            if (typeof value === 'object') {
                return of(value);
            }
            else {
                // initially, value is a simple string
                return of({ value, name: value });
            }
        }
        if (schema.displayWithChoices) {
            return of({ value, name: schema.displayWithChoices[schema.choices.indexOf(value)] });
        }
        return of({ value, name: value });
    }
    /**
     * handle GET / POST
     */
    getChoices(url, args, verb) {
        if (verb === 'GET') {
            return this.http.get(url, args);
        }
        else {
            return this.http.post(url, args, {
                headers: new HttpHeaders({
                    'Content-Type': 'application/json',
                })
            });
        }
    }
    /**
     * default: no delay
     */
    debounceTime() {
        return 0;
    }
}
//# sourceMappingURL=data:application/json;base64,