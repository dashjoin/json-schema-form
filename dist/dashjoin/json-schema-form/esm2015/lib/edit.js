import { EditElementDialogComponent } from './edit-element-dialog.component';
/**
 * form editor - has a 1:1 relationship to form node
 */
export class Edit {
    /**
     * get access to parent object's fields
     *
     * @param schemaChange  signal a change
     * @param name          the current property name (key)
     * @param schema        the current schema
     * @param parent        the parent's schema (required in order to change the order)
     * @param dialog        dialog service
     */
    constructor(schemaChange, name, schema, parent, dialog) {
        this.schemaChange = schemaChange;
        this.name = name;
        this.schema = schema;
        this.parent = parent;
        this.dialog = dialog;
    }
    /**
     * can add if addable is not empty
     */
    canAdd() {
        return this.addable().length > 0;
    }
    /**
     * get the entries in "properties" that are not in "order"
     */
    addable() {
        var _a, _b;
        let s;
        if (this.schema.properties) {
            s = this.schema;
        }
        else if ((_a = this.schema.items) === null || _a === void 0 ? void 0 : _a.properties) {
            s = this.schema.items;
        }
        else if ((_b = this.schema.additionalProperties) === null || _b === void 0 ? void 0 : _b.properties) {
            s = this.schema.additionalProperties;
        }
        else {
            return [];
        }
        if (s.order) {
            const set = new Set(Object.keys(s.properties));
            for (const p of s.order) {
                if (Array.isArray(p)) {
                    for (const q of p) {
                        set.delete(q);
                    }
                }
                else {
                    set.delete(p);
                }
            }
            return Array.from(set);
        }
        else {
            return [];
        }
    }
    /**
     * add a hidden prop to the end of the list
     */
    addSub(prop) {
        const index = this.parent.order.indexOf(this.name);
        if (index >= 0) {
            this.parent.order[index] = [this.parent.order[index], prop];
        }
        else {
            for (const p of this.parent.order) {
                if (Array.isArray(p)) {
                    if (p.indexOf(this.name) >= 0) {
                        p.push(prop);
                    }
                }
            }
        }
        this.schemaChange.emit();
    }
    /**
     * can add if addable is not empty
     */
    canAddSub() {
        return this.subaddable().length > 0;
    }
    /**
     * get the entries in "properties" that are not in "order"
     */
    subaddable() {
        var _a;
        if ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.order) {
            const set = new Set(Object.keys(this.parent.properties));
            for (const p of this.parent.order) {
                if (Array.isArray(p)) {
                    for (const q of p) {
                        set.delete(q);
                    }
                }
                else {
                    set.delete(p);
                }
            }
            return Array.from(set);
        }
        else {
            return [];
        }
    }
    /**
     * add a hidden prop to the end of the list
     */
    add(prop) {
        var _a;
        if (this.schema.properties) {
            this.schema.order.push(prop);
        }
        else if ((_a = this.schema.items) === null || _a === void 0 ? void 0 : _a.properties) {
            this.schema.items.order.push(prop);
        }
        else {
            this.schema.additionalProperties.order.push(prop);
        }
        this.schemaChange.emit();
    }
    /**
     * edit simple schema fields like title and description
     */
    edit() {
        var _a, _b, _c;
        // deep clone object so we have the possibility to cancel editing
        const clone = JSON.parse(JSON.stringify(this.schema));
        // handle (array) example
        if (((_b = (_a = clone.items) === null || _a === void 0 ? void 0 : _a.examples) === null || _b === void 0 ? void 0 : _b.length) > 0) {
            clone.example = clone.items.examples[0];
        }
        if (((_c = clone.examples) === null || _c === void 0 ? void 0 : _c.length) > 0) {
            clone.example = clone.examples[0];
        }
        // text is default
        if (!clone.widget) {
            clone.widget = 'text';
        }
        // horizontal is default
        if (!clone.layout) {
            clone.layout = 'horizontal';
        }
        // array: apply choices and widget to items
        if (clone.items) {
            clone.widget = clone.items.widget;
            clone.choices = clone.items.choices;
            clone.errorMessage = clone.items.errorMessage;
            clone.format = clone.items.format;
            clone.required = clone.items.required;
            clone.itemlayout = clone.items.layout;
        }
        const dialogRef = this.dialog.open(EditElementDialogComponent, { minWidth: '50%', data: clone });
        dialogRef.afterClosed().subscribe(data => {
            var _a, _b;
            if (data) {
                this.schema.title = data.title;
                this.schema.description = data.description;
                this.schema.widget = data.widget;
                this.schema.layout = data.layout;
                this.schema.readOnly = data.readOnly;
                this.schema.errorMessage = data.errorMessage;
                if (data.example) {
                    if (data.items) {
                        this.schema.items.examples = [data.example];
                    }
                    else {
                        this.schema.examples = [data.example];
                    }
                }
                if (data.style) {
                    delete data.style[''];
                }
                if (data.style && Object.keys(data.style).length > 0) {
                    this.schema.style = data.style;
                }
                if (data.class) {
                    data.class = data.class.filter(el => el != null);
                }
                if (((_a = data.class) === null || _a === void 0 ? void 0 : _a.length) > 0) {
                    this.schema.class = data.class;
                }
                if (data.items) {
                    if (((_b = data.choices) === null || _b === void 0 ? void 0 : _b.length) > 0) {
                        this.schema.items.choices = data.choices;
                    }
                    this.schema.items.widget = data.widget;
                    this.schema.items.format = data.format;
                    this.schema.items.errorMessage = data.errorMessage;
                    this.schema.items.required = data.required;
                    this.schema.items.layout = data.itemlayout;
                }
                else {
                    this.schema.choices = data.choices;
                    this.schema.widget = data.widget;
                    this.schema.format = data.format;
                    this.schema.errorMessage = data.errorMessage;
                    this.schema.required = data.required;
                }
                this.schemaChange.emit();
            }
        });
    }
    /**
     * can hide if I my parent is an object
     */
    canHide() {
        return this.parent ? true : false;
    }
    /**
     * hide this prop
     */
    hide() {
        if (!this.parent.order) {
            this.parent.order = Object.keys(this.parent.properties);
        }
        let index = 0;
        for (const p of this.parent.order) {
            if (Array.isArray(p)) {
                if (p.indexOf(this.name) >= 0) {
                    p.splice(p.indexOf(this.name), 1);
                    if (p.length === 1) {
                        this.parent.order[index] = p[0];
                    }
                }
            }
            index++;
        }
        if (this.parent.order.indexOf(this.name) >= 0) {
            this.parent.order.splice(this.parent.order.indexOf(this.name), 1);
        }
        this.schemaChange.emit();
    }
    /**
     * can I go up
     */
    canUp() {
        if (!this.parent) {
            return false;
        }
        const props = this.parent.order ? this.parent.order : Object.keys(this.parent.properties);
        const index = props.indexOf(this.name);
        if (index >= 0) {
            return index > 0;
        }
        else {
            for (const p of props) {
                if (Array.isArray(p)) {
                    if (p.indexOf(this.name) >= 0) {
                        return p.indexOf(this.name) > 0;
                    }
                }
            }
        }
    }
    /**
     * go up
     */
    up() {
        if (!this.parent.order) {
            this.parent.order = Object.keys(this.parent.properties);
        }
        let index = this.parent.order.indexOf(this.name);
        if (index >= 0) {
            const tmp = this.parent.order[index - 1];
            this.parent.order[index - 1] = this.parent.order[index];
            this.parent.order[index] = tmp;
        }
        else {
            for (const p of this.parent.order) {
                if (Array.isArray(p)) {
                    index = p.indexOf(this.name);
                    if (index >= 0) {
                        const tmp = p[index - 1];
                        p[index - 1] = p[index];
                        p[index] = tmp;
                    }
                }
            }
        }
        this.schemaChange.emit();
    }
    /**
     * can I go down
     */
    canDown() {
        if (!this.parent) {
            return false;
        }
        const props = this.parent.order ? this.parent.order : Object.keys(this.parent.properties);
        const index = props.indexOf(this.name);
        if (index >= 0) {
            return index < props.length - 1;
        }
        else {
            for (const p of props) {
                if (Array.isArray(p)) {
                    if (p.indexOf(this.name) >= 0) {
                        return p.indexOf(this.name) < p.length - 1;
                    }
                }
            }
        }
    }
    /**
     * go down
     */
    down() {
        if (!this.parent.order) {
            this.parent.order = Object.keys(this.parent.properties);
        }
        let index = this.parent.order.indexOf(this.name);
        if (index >= 0) {
            const tmp = this.parent.order[index + 1];
            this.parent.order[index + 1] = this.parent.order[index];
            this.parent.order[index] = tmp;
        }
        else {
            for (const p of this.parent.order) {
                if (Array.isArray(p)) {
                    index = p.indexOf(this.name);
                    if (index >= 0) {
                        const tmp = p[index + 1];
                        p[index + 1] = p[index];
                        p[index] = tmp;
                    }
                }
            }
        }
        this.schemaChange.emit();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2Rhc2hqb2luL2pzb24tc2NoZW1hLWZvcm0vc3JjL2xpYi9lZGl0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBRzdFOztHQUVHO0FBQ0gsTUFBTSxPQUFPLElBQUk7SUFFYjs7Ozs7Ozs7T0FRRztJQUNILFlBQ1ksWUFBZ0MsRUFBVSxJQUFZLEVBQVUsTUFBYyxFQUFVLE1BQWMsRUFDdEcsTUFBaUI7UUFEakIsaUJBQVksR0FBWixZQUFZLENBQW9CO1FBQVUsU0FBSSxHQUFKLElBQUksQ0FBUTtRQUFVLFdBQU0sR0FBTixNQUFNLENBQVE7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ3RHLFdBQU0sR0FBTixNQUFNLENBQVc7SUFDN0IsQ0FBQztJQUVEOztPQUVHO0lBQ0gsTUFBTTtRQUNGLE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsT0FBTzs7UUFDSCxJQUFJLENBQVMsQ0FBQztRQUNkLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUU7WUFDeEIsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7U0FDbkI7YUFBTSxVQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSywwQ0FBRSxVQUFVLEVBQUU7WUFDdEMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1NBQ3pCO2FBQU0sVUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLG9CQUFvQiwwQ0FBRSxVQUFVLEVBQUU7WUFDckQsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUM7U0FDeEM7YUFBTTtZQUNILE9BQU8sRUFBRSxDQUFDO1NBQ2I7UUFDRCxJQUFJ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LE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQzdCLElBQUksS0FBSyxJQUFJLENBQUMsRUFBRTt3QkFDWixNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO3dCQUN6QixDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQzt3QkFDeEIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQztxQkFDbEI7aUJBQ0o7YUFDSjtTQUNKO1FBQ0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM3QixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTWF0RGlhbG9nIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvZGlhbG9nJztcclxuaW1wb3J0IHsgRWRpdEVsZW1lbnREaWFsb2dDb21wb25lbnQgfSBmcm9tICcuL2VkaXQtZWxlbWVudC1kaWFsb2cuY29tcG9uZW50JztcclxuaW1wb3J0IHsgU2NoZW1hIH0gZnJvbSAnLi9zY2hlbWEnO1xyXG5cclxuLyoqXHJcbiAqIGZvcm0gZWRpdG9yIC0gaGFzIGEgMToxIHJlbGF0aW9uc2hpcCB0byBmb3JtIG5vZGVcclxuICovXHJcbmV4cG9ydCBjbGFzcyBFZGl0IHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIGdldCBhY2Nlc3MgdG8gcGFyZW50IG9iamVjdCdzIGZpZWxkc1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBzY2hlbWFDaGFuZ2UgIHNpZ25hbCBhIGNoYW5nZVxyXG4gICAgICogQHBhcmFtIG5hbWUgICAgICAgICAgdGhlIGN1cnJlbnQgcHJvcGVydHkgbmFtZSAoa2V5KVxyXG4gICAgICogQHBhcmFtIHNjaGVtYSAgICAgICAgdGhlIGN1cnJlbnQgc2NoZW1hXHJcbiAgICAgKiBAcGFyYW0gcGFyZW50ICAgICAgICB0aGUgcGFyZW50J3Mgc2NoZW1hIChyZXF1aXJlZCBpbiBvcmRlciB0byBjaGFuZ2UgdGhlIG9yZGVyKVxyXG4gICAgICogQHBhcmFtIGRpYWxvZyAgICAgICAgZGlhbG9nIHNlcnZpY2VcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSBzY2hlbWFDaGFuZ2U6IEV2ZW50RW1pdHRlcjx2b2lkPiwgcHJpdmF0ZSBuYW1lOiBzdHJpbmcsIHByaXZhdGUgc2NoZW1hOiBTY2hlbWEsIHByaXZhdGUgcGFyZW50OiBTY2hlbWEsXHJcbiAgICAgICAgcHJpdmF0ZSBkaWFsb2c6IE1hdERpYWxvZykge1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogY2FuIGFkZCBpZiBhZGRhYmxlIGlzIG5vdCBlbXB0eVxyXG4gICAgICovXHJcbiAgICBjYW5BZGQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkYWJsZSgpLmxlbmd0aCA+IDA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBnZXQgdGhlIGVudHJpZXMgaW4gXCJwcm9wZXJ0aWVzXCIgdGhhdCBhcmUgbm90IGluIFwib3JkZXJcIlxyXG4gICAgICovXHJcbiAgICBhZGRhYmxlKCk6IHN0cmluZ1tdIHtcclxuICAgICAgICBsZXQgczogU2NoZW1hO1xyXG4gICAgICAgIGlmICh0aGlzLnNjaGVtYS5wcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgICAgIHMgPSB0aGlzLnNjaGVtYTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc2NoZW1hLml0ZW1zPy5wcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgICAgIHMgPSB0aGlzLnNjaGVtYS5pdGVtcztcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc2NoZW1hLmFkZGl0aW9uYWxQcm9wZXJ0aWVzPy5wcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgICAgIHMgPSB0aGlzLnNjaGVtYS5hZGRpdGlvbmFsUHJvcGVydGllcztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzLm9yZGVyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNldCA9IG5ldyBTZXQoT2JqZWN0LmtleXMocy5wcm9wZXJ0aWVzKSk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgcCBvZiBzLm9yZGVyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcSBvZiBwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldC5kZWxldGUocSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXQuZGVsZXRlKHApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBBcnJheS5mcm9tKHNldCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGFkZCBhIGhpZGRlbiBwcm9wIHRvIHRoZSBlbmQgb2YgdGhlIGxpc3RcclxuICAgICAqL1xyXG4gICAgYWRkU3ViKHByb3A6IHN0cmluZykge1xyXG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5wYXJlbnQub3JkZXIuaW5kZXhPZih0aGlzLm5hbWUpO1xyXG4gICAgICAgIGlmIChpbmRleCA+PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFyZW50Lm9yZGVyW2luZGV4XSA9IFsodGhpcy5wYXJlbnQub3JkZXJbaW5kZXhdIGFzIHN0cmluZyksIHByb3BdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgcCBvZiB0aGlzLnBhcmVudC5vcmRlcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocC5pbmRleE9mKHRoaXMubmFtZSkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwLnB1c2gocHJvcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2NoZW1hQ2hhbmdlLmVtaXQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGNhbiBhZGQgaWYgYWRkYWJsZSBpcyBub3QgZW1wdHlcclxuICAgICAqL1xyXG4gICAgY2FuQWRkU3ViKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN1YmFkZGFibGUoKS5sZW5ndGggPiAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogZ2V0IHRoZSBlbnRyaWVzIGluIFwicHJvcGVydGllc1wiIHRoYXQgYXJlIG5vdCBpbiBcIm9yZGVyXCJcclxuICAgICAqL1xyXG4gICAgc3ViYWRkYWJsZSgpOiBzdHJpbmdbXSB7XHJcbiAgICAgICAgaWYgKHRoaXMucGFyZW50Py5vcmRlcikge1xyXG4gICAgICAgICAgICBjb25zdCBzZXQgPSBuZXcgU2V0KE9iamVjdC5rZXlzKHRoaXMucGFyZW50LnByb3BlcnRpZXMpKTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBwIG9mIHRoaXMucGFyZW50Lm9yZGVyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcSBvZiBwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldC5kZWxldGUocSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXQuZGVsZXRlKHApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBBcnJheS5mcm9tKHNldCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGFkZCBhIGhpZGRlbiBwcm9wIHRvIHRoZSBlbmQgb2YgdGhlIGxpc3RcclxuICAgICAqL1xyXG4gICAgYWRkKHByb3A6IHN0cmluZykge1xyXG4gICAgICAgIGlmICh0aGlzLnNjaGVtYS5wcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2NoZW1hLm9yZGVyLnB1c2gocHJvcCk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnNjaGVtYS5pdGVtcz8ucHJvcGVydGllcykge1xyXG4gICAgICAgICAgICB0aGlzLnNjaGVtYS5pdGVtcy5vcmRlci5wdXNoKHByb3ApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2NoZW1hLmFkZGl0aW9uYWxQcm9wZXJ0aWVzLm9yZGVyLnB1c2gocHJvcCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2NoZW1hQ2hhbmdlLmVtaXQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGVkaXQgc2ltcGxlIHNjaGVtYSBmaWVsZHMgbGlrZSB0aXRsZSBhbmQgZGVzY3JpcHRpb25cclxuICAgICAqL1xyXG4gICAgZWRpdCgpIHtcclxuICAgICAgICAvLyBkZWVwIGNsb25lIG9iamVjdCBzbyB3ZSBoYXZlIHRoZSBwb3NzaWJpbGl0eSB0byBjYW5jZWwgZWRpdGluZ1xyXG4gICAgICAgIGNvbnN0IGNsb25lID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLnNjaGVtYSkpO1xyXG5cclxuICAgICAgICAvLyBoYW5kbGUgKGFycmF5KSBleGFtcGxlXHJcbiAgICAgICAgaWYgKGNsb25lLml0ZW1zPy5leGFtcGxlcz8ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBjbG9uZS5leGFtcGxlID0gY2xvbmUuaXRlbXMuZXhhbXBsZXNbMF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjbG9uZS5leGFtcGxlcz8ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBjbG9uZS5leGFtcGxlID0gY2xvbmUuZXhhbXBsZXNbMF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0ZXh0IGlzIGRlZmF1bHRcclxuICAgICAgICBpZiAoIWNsb25lLndpZGdldCkge1xyXG4gICAgICAgICAgICBjbG9uZS53aWRnZXQgPSAndGV4dCc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBob3Jpem9udGFsIGlzIGRlZmF1bHRcclxuICAgICAgICBpZiAoIWNsb25lLmxheW91dCkge1xyXG4gICAgICAgICAgICBjbG9uZS5sYXlvdXQgPSAnaG9yaXpvbnRhbCc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBhcnJheTogYXBwbHkgY2hvaWNlcyBhbmQgd2lkZ2V0IHRvIGl0ZW1zXHJcbiAgICAgICAgaWYgKGNsb25lLml0ZW1zKSB7XHJcbiAgICAgICAgICAgIGNsb25lLndpZGdldCA9IGNsb25lLml0ZW1zLndpZGdldDtcclxuICAgICAgICAgICAgY2xvbmUuY2hvaWNlcyA9IGNsb25lLml0ZW1zLmNob2ljZXM7XHJcbiAgICAgICAgICAgIGNsb25lLmVycm9yTWVzc2FnZSA9IGNsb25lLml0ZW1zLmVycm9yTWVzc2FnZTtcclxuICAgICAgICAgICAgY2xvbmUuZm9ybWF0ID0gY2xvbmUuaXRlbXMuZm9ybWF0O1xyXG4gICAgICAgICAgICBjbG9uZS5yZXF1aXJlZCA9IGNsb25lLml0ZW1zLnJlcXVpcmVkO1xyXG4gICAgICAgICAgICBjbG9uZS5pdGVtbGF5b3V0ID0gY2xvbmUuaXRlbXMubGF5b3V0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZGlhbG9nUmVmID0gdGhpcy5kaWFsb2cub3BlbihFZGl0RWxlbWVudERpYWxvZ0NvbXBvbmVudCwgeyBtaW5XaWR0aDogJzUwJScsIGRhdGE6IGNsb25lIH0pO1xyXG4gICAgICAgIGRpYWxvZ1JlZi5hZnRlckNsb3NlZCgpLnN1YnNjcmliZShkYXRhID0+IHtcclxuICAgICAgICAgICAgaWYgKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2NoZW1hLnRpdGxlID0gZGF0YS50aXRsZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2NoZW1hLmRlc2NyaXB0aW9uID0gZGF0YS5kZXNjcmlwdGlvbjtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2NoZW1hLndpZGdldCA9IGRhdGEud2lkZ2V0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zY2hlbWEubGF5b3V0ID0gZGF0YS5sYXlvdXQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNjaGVtYS5yZWFkT25seSA9IGRhdGEucmVhZE9ubHk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNjaGVtYS5lcnJvck1lc3NhZ2UgPSBkYXRhLmVycm9yTWVzc2FnZTtcclxuICAgICAgICAgICAgICAgIGlmIChkYXRhLmV4YW1wbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5pdGVtcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNjaGVtYS5pdGVtcy5leGFtcGxlcyA9IFtkYXRhLmV4YW1wbGVdO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2NoZW1hLmV4YW1wbGVzID0gW2RhdGEuZXhhbXBsZV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuc3R5bGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgZGF0YS5zdHlsZVsnJ107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5zdHlsZSAmJiBPYmplY3Qua2V5cyhkYXRhLnN0eWxlKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2hlbWEuc3R5bGUgPSBkYXRhLnN0eWxlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuY2xhc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhLmNsYXNzID0gZGF0YS5jbGFzcy5maWx0ZXIoZWwgPT4gZWwgIT0gbnVsbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5jbGFzcz8ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NoZW1hLmNsYXNzID0gZGF0YS5jbGFzcztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChkYXRhLml0ZW1zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuY2hvaWNlcz8ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNjaGVtYS5pdGVtcy5jaG9pY2VzID0gZGF0YS5jaG9pY2VzO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjaGVtYS5pdGVtcy53aWRnZXQgPSBkYXRhLndpZGdldDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjaGVtYS5pdGVtcy5mb3JtYXQgPSBkYXRhLmZvcm1hdDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjaGVtYS5pdGVtcy5lcnJvck1lc3NhZ2UgPSBkYXRhLmVycm9yTWVzc2FnZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjaGVtYS5pdGVtcy5yZXF1aXJlZCA9IGRhdGEucmVxdWlyZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2hlbWEuaXRlbXMubGF5b3V0ID0gZGF0YS5pdGVtbGF5b3V0O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjaGVtYS5jaG9pY2VzID0gZGF0YS5jaG9pY2VzO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NoZW1hLndpZGdldCA9IGRhdGEud2lkZ2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NoZW1hLmZvcm1hdCA9IGRhdGEuZm9ybWF0O1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NoZW1hLmVycm9yTWVzc2FnZSA9IGRhdGEuZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NoZW1hLnJlcXVpcmVkID0gZGF0YS5yZXF1aXJlZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuc2NoZW1hQ2hhbmdlLmVtaXQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogY2FuIGhpZGUgaWYgSSBteSBwYXJlbnQgaXMgYW4gb2JqZWN0XHJcbiAgICAgKi9cclxuICAgIGNhbkhpZGUoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50ID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogaGlkZSB0aGlzIHByb3BcclxuICAgICAqL1xyXG4gICAgaGlkZSgpIHtcclxuICAgICAgICBpZiAoIXRoaXMucGFyZW50Lm9yZGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFyZW50Lm9yZGVyID0gT2JqZWN0LmtleXModGhpcy5wYXJlbnQucHJvcGVydGllcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBpbmRleCA9IDA7XHJcbiAgICAgICAgZm9yIChjb25zdCBwIG9mIHRoaXMucGFyZW50Lm9yZGVyKSB7XHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHApKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocC5pbmRleE9mKHRoaXMubmFtZSkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHAuc3BsaWNlKHAuaW5kZXhPZih0aGlzLm5hbWUpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocC5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQub3JkZXJbaW5kZXhdID0gcFswXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaW5kZXgrKztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMucGFyZW50Lm9yZGVyLmluZGV4T2YodGhpcy5uYW1lKSA+PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFyZW50Lm9yZGVyLnNwbGljZSh0aGlzLnBhcmVudC5vcmRlci5pbmRleE9mKHRoaXMubmFtZSksIDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNjaGVtYUNoYW5nZS5lbWl0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBjYW4gSSBnbyB1cFxyXG4gICAgICovXHJcbiAgICBjYW5VcCgpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoIXRoaXMucGFyZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcHJvcHMgPSB0aGlzLnBhcmVudC5vcmRlciA/IHRoaXMucGFyZW50Lm9yZGVyIDogT2JqZWN0LmtleXModGhpcy5wYXJlbnQucHJvcGVydGllcyk7XHJcbiAgICAgICAgY29uc3QgaW5kZXggPSBwcm9wcy5pbmRleE9mKHRoaXMubmFtZSk7XHJcbiAgICAgICAgaWYgKGluZGV4ID49IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGluZGV4ID4gMDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHAgb2YgcHJvcHMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHAuaW5kZXhPZih0aGlzLm5hbWUpID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHAuaW5kZXhPZih0aGlzLm5hbWUpID4gMDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBnbyB1cFxyXG4gICAgICovXHJcbiAgICB1cCgpIHtcclxuICAgICAgICBpZiAoIXRoaXMucGFyZW50Lm9yZGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFyZW50Lm9yZGVyID0gT2JqZWN0LmtleXModGhpcy5wYXJlbnQucHJvcGVydGllcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBpbmRleCA9IHRoaXMucGFyZW50Lm9yZGVyLmluZGV4T2YodGhpcy5uYW1lKTtcclxuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgICBjb25zdCB0bXAgPSB0aGlzLnBhcmVudC5vcmRlcltpbmRleCAtIDFdO1xyXG4gICAgICAgICAgICB0aGlzLnBhcmVudC5vcmRlcltpbmRleCAtIDFdID0gdGhpcy5wYXJlbnQub3JkZXJbaW5kZXhdO1xyXG4gICAgICAgICAgICB0aGlzLnBhcmVudC5vcmRlcltpbmRleF0gPSB0bXA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBwIG9mIHRoaXMucGFyZW50Lm9yZGVyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4ID0gcC5pbmRleE9mKHRoaXMubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG1wID0gcFtpbmRleCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwW2luZGV4IC0gMV0gPSBwW2luZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcFtpbmRleF0gPSB0bXA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2NoZW1hQ2hhbmdlLmVtaXQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGNhbiBJIGdvIGRvd25cclxuICAgICAqL1xyXG4gICAgY2FuRG93bigpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoIXRoaXMucGFyZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcHJvcHMgPSB0aGlzLnBhcmVudC5vcmRlciA/IHRoaXMucGFyZW50Lm9yZGVyIDogT2JqZWN0LmtleXModGhpcy5wYXJlbnQucHJvcGVydGllcyk7XHJcbiAgICAgICAgY29uc3QgaW5kZXggPSBwcm9wcy5pbmRleE9mKHRoaXMubmFtZSk7XHJcbiAgICAgICAgaWYgKGluZGV4ID49IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGluZGV4IDwgcHJvcHMubGVuZ3RoIC0gMTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHAgb2YgcHJvcHMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHAuaW5kZXhPZih0aGlzLm5hbWUpID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHAuaW5kZXhPZih0aGlzLm5hbWUpIDwgcC5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGdvIGRvd25cclxuICAgICAqL1xyXG4gICAgZG93bigpIHtcclxuICAgICAgICBpZiAoIXRoaXMucGFyZW50Lm9yZGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFyZW50Lm9yZGVyID0gT2JqZWN0LmtleXModGhpcy5wYXJlbnQucHJvcGVydGllcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBpbmRleCA9IHRoaXMucGFyZW50Lm9yZGVyLmluZGV4T2YodGhpcy5uYW1lKTtcclxuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgICBjb25zdCB0bXAgPSB0aGlzLnBhcmVudC5vcmRlcltpbmRleCArIDFdO1xyXG4gICAgICAgICAgICB0aGlzLnBhcmVudC5vcmRlcltpbmRleCArIDFdID0gdGhpcy5wYXJlbnQub3JkZXJbaW5kZXhdO1xyXG4gICAgICAgICAgICB0aGlzLnBhcmVudC5vcmRlcltpbmRleF0gPSB0bXA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBwIG9mIHRoaXMucGFyZW50Lm9yZGVyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4ID0gcC5pbmRleE9mKHRoaXMubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG1wID0gcFtpbmRleCArIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwW2luZGV4ICsgMV0gPSBwW2luZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcFtpbmRleF0gPSB0bXA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2NoZW1hQ2hhbmdlLmVtaXQoKTtcclxuICAgIH1cclxufVxyXG4iXX0=