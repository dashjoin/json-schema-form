/**
 * static JsonPointer implementation
 */
export class JsonPointer {
    /**
     * evaluate the JSON pointer on o
     */
    static jsonPointer(o, pointer) {
        return JsonPointer.jsonPointer2(o, JsonPointer.split(pointer));
    }
    /**
     * evaluate the JSON pointer (parsed array of paths) on o
     */
    static jsonPointer2(o, paths) {
        if (o === undefined) {
            return undefined;
        }
        if (paths.length === 0) {
            return o;
        }
        const path = paths[0];
        const np = Object.assign([], paths);
        np.splice(0, 1);
        if (paths[0] === '*') {
            const res = [];
            for (const f of (typeof (o) === 'object' ? Object.values(o) : o)) {
                res.push(this.jsonPointer2(f, np));
            }
            return res;
        }
        else {
            return this.jsonPointer2(o[path], np);
        }
    }
    /**
     * strip leading / and split the JSON pointer
     */
    static split(s) {
        if (s === '') {
            return [];
        }
        if (s.startsWith('/')) {
            s = s.substring(1);
            const arr = s.split('/');
            for (const a of arr) {
                if (a === '') {
                    throw new Error('JSON Pointer must not contain an empty reference token');
                }
            }
            return arr;
        }
        throw new Error('JSON Pointer must start with /');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi1wb2ludGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvZGFzaGpvaW4vanNvbi1zY2hlbWEtZm9ybS9zcmMvbGliL2pzb24tcG9pbnRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRztBQUNILE1BQU0sT0FBTyxXQUFXO0lBRXBCOztPQUVHO0lBQ0gsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFNLEVBQUUsT0FBZTtRQUN0QyxPQUFPLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRUQ7O09BRUc7SUFDSCxNQUFNLENBQUMsWUFBWSxDQUFDLENBQU0sRUFBRSxLQUFlO1FBRXZDLElBQUksQ0FBQyxLQUFLLFNBQVMsRUFBRTtZQUNqQixPQUFPLFNBQVMsQ0FBQztTQUNwQjtRQUVELElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDcEIsT0FBTyxDQUFDLENBQUM7U0FDWjtRQUVELE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNwQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUVoQixJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUU7WUFDbEIsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDO1lBQ2YsS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUM5RCxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDdEM7WUFDRCxPQUFPLEdBQUcsQ0FBQztTQUNkO2FBQU07WUFDSCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQ3pDO0lBQ0wsQ0FBQztJQUVEOztPQUVHO0lBQ0gsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFTO1FBQ2xCLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNWLE9BQU8sRUFBRSxDQUFDO1NBQ2I7UUFDRCxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDbkIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkIsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN6QixLQUFLLE1BQU0sQ0FBQyxJQUFJLEdBQUcsRUFBRTtnQkFDakIsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFO29CQUNWLE1BQU0sSUFBSSxLQUFLLENBQUMsd0RBQXdELENBQUMsQ0FBQztpQkFDN0U7YUFDSjtZQUNELE9BQU8sR0FBRyxDQUFDO1NBQ2Q7UUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7SUFDdEQsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIHN0YXRpYyBKc29uUG9pbnRlciBpbXBsZW1lbnRhdGlvblxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEpzb25Qb2ludGVyIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIGV2YWx1YXRlIHRoZSBKU09OIHBvaW50ZXIgb24gb1xyXG4gICAgICovXHJcbiAgICBzdGF0aWMganNvblBvaW50ZXIobzogYW55LCBwb2ludGVyOiBzdHJpbmcpOiBhbnkge1xyXG4gICAgICAgIHJldHVybiBKc29uUG9pbnRlci5qc29uUG9pbnRlcjIobywgSnNvblBvaW50ZXIuc3BsaXQocG9pbnRlcikpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogZXZhbHVhdGUgdGhlIEpTT04gcG9pbnRlciAocGFyc2VkIGFycmF5IG9mIHBhdGhzKSBvbiBvXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBqc29uUG9pbnRlcjIobzogYW55LCBwYXRoczogc3RyaW5nW10pOiBhbnkge1xyXG5cclxuICAgICAgICBpZiAobyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocGF0aHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBvO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgcGF0aCA9IHBhdGhzWzBdO1xyXG4gICAgICAgIGNvbnN0IG5wID0gT2JqZWN0LmFzc2lnbihbXSwgcGF0aHMpO1xyXG4gICAgICAgIG5wLnNwbGljZSgwLCAxKTtcclxuXHJcbiAgICAgICAgaWYgKHBhdGhzWzBdID09PSAnKicpIHtcclxuICAgICAgICAgICAgY29uc3QgcmVzID0gW107XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZiBvZiAodHlwZW9mIChvKSA9PT0gJ29iamVjdCcgPyBPYmplY3QudmFsdWVzKG8pIDogbykpIHtcclxuICAgICAgICAgICAgICAgIHJlcy5wdXNoKHRoaXMuanNvblBvaW50ZXIyKGYsIG5wKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5qc29uUG9pbnRlcjIob1twYXRoXSwgbnApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHN0cmlwIGxlYWRpbmcgLyBhbmQgc3BsaXQgdGhlIEpTT04gcG9pbnRlclxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgc3BsaXQoczogc3RyaW5nKTogc3RyaW5nW10ge1xyXG4gICAgICAgIGlmIChzID09PSAnJykge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzLnN0YXJ0c1dpdGgoJy8nKSkge1xyXG4gICAgICAgICAgICBzID0gcy5zdWJzdHJpbmcoMSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGFyciA9IHMuc3BsaXQoJy8nKTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBhIG9mIGFycikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGEgPT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdKU09OIFBvaW50ZXIgbXVzdCBub3QgY29udGFpbiBhbiBlbXB0eSByZWZlcmVuY2UgdG9rZW4nKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gYXJyO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0pTT04gUG9pbnRlciBtdXN0IHN0YXJ0IHdpdGggLycpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==